<template>
  <div class="text-generation-list-container">
    <div class="page-header">
      <div class="title-section">
        <h2>{{ eventGraphTitle ? `生成记录：${eventGraphTitle}` : '生成文本列表' }}</h2>
        <p v-if="eventGraphDetail?.description" class="graph-description">{{ eventGraphDetail.description }}</p>
      </div>
      <div class="header-actions">
        <el-button type="primary" @click="handleCreate">生成新文本</el-button>
        <el-button v-if="eventGraphId" @click="goBack">返回列表</el-button>
      </div>
    </div>
    
    <!-- 卡片布局视图 -->
    <div v-loading="loading" class="card-view" v-if="eventGraphId">
      <template v-if="textList.length > 0">
        <div class="card-container">
          <el-card 
            v-for="item in textList" 
            :key="item.id" 
            class="text-card"
            shadow="hover"
          >
            <template #header>
              <div class="card-header">
                <div class="card-title">
                  <el-tag class="style-tag" :type="getStyleTagType(item.style?.id)">
                    {{ item.style?.name }}
                  </el-tag>
                  <span class="time">生成时间：{{ item.createdAt }}</span>
                </div>
              </div>
            </template>
            <div class="card-content">
              <div class="text-preview">
                {{ formatContent(item.content) }}
              </div>
              <div class="card-actions">
                <el-button type="primary" link @click="handleView(item.id)">查看全文</el-button>
                <el-popconfirm title="确定删除此项?" @confirm="handleDelete(item.id)">
                  <template #reference>
                    <el-button type="danger" link>删除</el-button>
                  </template>
                </el-popconfirm>
              </div>
            </div>
          </el-card>
        </div>
      </template>
      <el-empty v-else description="暂无生成记录" />
    </div>
    
    <!-- 表格布局视图（当没有指定事件图ID时显示） -->
    <div v-else>
      <el-table
        v-loading="loading"
        :data="textList"
        border
        style="width: 100%"
      >
        <el-table-column prop="id" label="ID" width="100" />
        <el-table-column label="事件图" width="180">
          <template #default="scope">
            {{ scope.row.eventGraphId }}
          </template>
        </el-table-column>
        <el-table-column label="风格" width="180">
          <template #default="scope">
            {{ scope.row.style?.name }}
          </template>
        </el-table-column>
        <el-table-column label="内容预览">
          <template #default="scope">
            {{ formatContent(scope.row.content, 50) }}
          </template>
        </el-table-column>
        <el-table-column prop="createdAt" label="创建时间" width="180" />
        <el-table-column label="操作" width="200" fixed="right">
          <template #default="scope">
            <el-button link type="primary" size="small" @click="handleView(scope.row.id)">查看</el-button>
            <el-popconfirm title="确定删除此项?" @confirm="handleDelete(scope.row.id)">
              <template #reference>
                <el-button link type="danger" size="small">删除</el-button>
              </template>
            </el-popconfirm>
          </template>
        </el-table-column>
      </el-table>
      
      <div class="pagination-container">
        <el-pagination
          v-model:current-page="queryParams.page"
          v-model:page-size="queryParams.limit"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next, jumper"
          :total="total"
          @size-change="handleSizeChange"
          @current-change="handleCurrentChange"
        />
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, computed, onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { ElMessage } from 'element-plus'
import { getGeneratedTextList, deleteGeneratedText } from '@/api/generatedText'
import { getEventGraphDetail } from '@/api/eventGraph'

const router = useRouter()
const route = useRoute()
const loading = ref(false)
const textList = ref([])
const total = ref(0)
const eventGraphDetail = ref(null)
const eventGraphTitle = ref('')

// 从路由参数获取事件图ID
const eventGraphId = computed(() => {
  return route.query.eventGraphId || null
})

// 查询参数
const queryParams = reactive({
  page: 1,
  limit: 50,
  eventGraphId: null
})

// 获取事件图详情
const fetchEventGraphDetail = async (id) => {
  try {
    const response = await getEventGraphDetail(id)
    if (response && response.success) {
      eventGraphDetail.value = response.data
      eventGraphTitle.value = response.data.title
    } else {
      eventGraphTitle.value = `事件图 ${id}`
    }
  } catch (error) {
    console.error('获取事件图详情失败:', error)
    eventGraphTitle.value = `事件图 ${id}`
  }
}

// 获取生成文本列表
const fetchTextList = async () => {
  loading.value = true
  try {
    // 如果有事件图ID，更新查询参数
    if (eventGraphId.value) {
      queryParams.eventGraphId = eventGraphId.value
      await fetchEventGraphDetail(eventGraphId.value)
    } else {
      queryParams.eventGraphId = null
    }
    
    const response = await getGeneratedTextList(queryParams)
    console.log('生成文本列表响应:', response)
    
    if (response) {
      textList.value = response
      total.value = response.length
    } else {
      textList.value = []
      total.value = 0
      ElMessage.error('获取生成文本列表失败')
    }
  } catch (error) {
    console.error('获取生成文本列表失败:', error)
    ElMessage.error('获取生成文本列表失败')
    textList.value = []
    total.value = 0
  } finally {
    loading.value = false
  }
}

// 格式化内容预览
const formatContent = (content, maxLength = 200) => {
  if (!content) return '无内容'
  // 处理换行符
  let text = content.replace(/\n+/g, ' ')
  // 限制长度
  if (text.length > maxLength) {
    text = text.substring(0, maxLength) + '...'
  }
  return text
}

// 获取风格标签类型
const getStyleTagType = (styleId) => {
  const types = ['', 'primary', 'success', 'warning', 'danger', 'info']
  return types[styleId % types.length] || 'info'
}

// 页码改变
const handleCurrentChange = (page) => {
  queryParams.page = page
  fetchTextList()
}

// 每页条数改变
const handleSizeChange = (size) => {
  queryParams.limit = size
  fetchTextList()
}

// 创建生成文本
const handleCreate = () => {
  if (eventGraphId.value) {
    router.push(`/text-generation/create?eventGraphId=${eventGraphId.value}`)
  } else {
    router.push('/text-generation/create')
  }
}

// 查看生成文本
const handleView = (id) => {
  router.push(`/text-generation/detail/${id}`)
}

// 删除生成文本
const handleDelete = async (id) => {
  try {
    const response = await deleteGeneratedText(id)
    
    if (response && response.success) {
      ElMessage.success('删除成功')
      await fetchTextList()
    } else {
      ElMessage.error(response?.message || response?.error || '删除失败')
    }
  } catch (error) {
    console.error('删除生成文本失败:', error)
    ElMessage.error('删除生成文本失败')
  }
}

// 返回列表
const goBack = () => {
  router.push('/event-graph/list')
}

onMounted(() => {
  fetchTextList()
})
</script>

<style scoped>
.text-generation-list-container {
  padding: 20px;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 20px;
}

.title-section {
  display: flex;
  flex-direction: column;
}

.graph-description {
  margin-top: 5px;
  color: #606266;
  font-size: 14px;
}

.header-actions {
  display: flex;
  gap: 10px;
}

.pagination-container {
  margin-top: 20px;
  display: flex;
  justify-content: center;
}

.card-view {
  min-height: 400px;
}

.card-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.text-card {
  width: calc(33.333% - 14px);
  height: 380px;
  display: flex;
  flex-direction: column;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-title {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.style-tag {
  margin-right: 10px;
}

.time {
  font-size: 12px;
  color: #909399;
}

.card-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 0;
}

.text-preview {
  flex: 1;
  min-height: 0;
  overflow-y: auto;
  color: #606266;
  line-height: 1.5;
  padding: 0 5px 10px 0;
}

.card-actions {
  flex-shrink: 0;
  display: flex;
  justify-content: flex-end;
  padding: 10px 0;
  border-top: 1px solid #ebeef5;
  margin-top: auto;
  background-color: #fff;
}

:deep(.el-card__header) {
  flex-shrink: 0;
  padding: 10px 15px;
}

:deep(.el-card__body) {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 0;
  padding: 15px;
}

@media (max-width: 1400px) {
  .text-card {
    width: calc(50% - 10px);
  }
}

@media (max-width: 900px) {
  .text-card {
    width: 100%;
  }
}
</style> 